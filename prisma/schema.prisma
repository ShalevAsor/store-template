generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing Product model
model Product {
  id          String   @id @default(cuid())
  name        String
  price       Int     
  description String?
  compareAtPrice Int?   // Original price for sale display (in cents)
  
  // Inventory
  stock       Int?    // null = unlimited, 0 = out of stock , number = available 
  sku         String?   @unique // Buisness identifier
  
  // Product organization
  category    String?  // Flat category system
  slug        String    @unique 
  status      ProductStatus @default(DRAFT)

  // Product type 
  isDigital   Boolean  @default(false)

  // Relations 
  images      ProductImage[]


  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}


model ProductImage{
  id       String @id @default(cuid())
  productId String 
  imageKey  String 
  altText String?
  sortOrder Int   @default(0)
  
  // Relations 
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("product_images")
}




model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  customerName    String
  customerEmail   String
  customerPhone   String?
  // Shipping address for orders with non-digital items
  shippingLine1     String?
  shippingLine2     String?
  shippingCity      String?
  shippingState     String?
  shippingPostalCode String?
  shippingCountry   String?
  paymentMethod   String      @default("paypal") // user-facing method
  paymentProviderId String?     // technical provider ID (paypal, stripe, etc.)
  isDigital       Boolean     @default(false) // Track if order contains only digital products
  subtotal        Int         // Total price of al order items (item.price * item.quantity) for each item in this order (minor units)
  shippingAmount  Int?        // shipping price in minor units
  taxAmount       Int?        // tax amount in minor units 
  paidAmount      Int?        // Amount actually paid/captured (minor units)
  status          OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(CREATED)

  paymentId       String?     // Provider's payment ID (PayPal order ID)
  transactionId   String?     // Provider's transaction ID after capture
  payerEmail      String?     // Email used for payment (might differ from customerEmail)
  refundAmount    Int? // Track total refunded amount
  refundedAt      DateTime?
  refundId        String?
  paidAt          DateTime?   // When payment was completed
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  orderItems      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  productName String  
  price       Int
  quantity    Int
  // Relations
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("order_items")
}

model StoreSetting {
  id         String @id @default(cuid())
  key        String @unique 
  value      String
  type       SettingType
  category   SettingCategory
  description  String?
  isRequired   Boolean     @default(false)

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  @@map("store_settings")
}





// Order status enum - more comprehensive workflow
enum OrderStatus {
  PENDING     // Order created, payment pending
  CONFIRMED   // Payment received/confirmed
  PROCESSING  // Order being prepared
  SHIPPED     // Physical products shipped
  DELIVERED   // Physical products delivered
  COMPLETED   // Digital products delivered OR physical delivered + confirmed
  CANCELLED   // Order cancelled
  REFUNDED    // Order refunded
  
  @@map("order_status")
}

enum ProductStatus {
  DRAFT     // Not visible to customers
  ACTIVE    // Available for purchase
  ARCHIVED  // Hidden but not deleted
  
  @@map("product_status")
}

enum PaymentStatus {
  CREATED     // Payment created, awaiting user action
  PENDING     // Payment initiated, processing
  APPROVED    // User approved, ready to capture
  COMPLETED   // Payment successfully captured
  FAILED      // Payment failed
  CANCELLED   // Payment cancelled by user
  EXPIRED     // Payment session expired
  REFUNDED    // Payment refunded
  
  @@map("payment_status")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  IMAGE
  EMAIL
  URL
  TEXT_AREA
  
  @@map("setting_type")
}

enum SettingCategory {
  STORE_IDENTITY
  OPERATIONAL
  CONTENT
  BUSINESS
  EMAIL_TEMPLATES
  APPEARANCE
  
  @@map("setting_category")
}
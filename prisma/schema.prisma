generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing Product model
model Product {
  id          String   @id @default(cuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  compareAtPrice Decimal?  @db.Decimal(10, 2) // original price for sale display
  
  // Inventory
  stock       Int?    // null = unlimited, 0 = out of stock , number = available 
  sku         String?   @unique // Buisness identifier
  
  // Product organization
  category    String?  // Flat category system
  slug        String    @unique 
  status      ProductStatus @default(DRAFT)

  // Product type 
  isDigital   Boolean  @default(false)

  // Relations 
  images      ProductImage[]


  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}


model ProductImage{
  id       String @id @default(cuid())
  productId String 
  imageKey  String 
  altText String?
  sortOrder Int   @default(0)
  
  // Relations 
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("product_images")
}




model Order {
  id              String      @id @default(cuid())
  customerName    String
  customerEmail   String
  customerPhone   String?
  shippingAddress String?     // Optional for digital products
  paymentMethod   String      @default("card") // card, paypal, stripe, bank_transfer, wallet
  isDigital       Boolean     @default(false) // Track if order contains only digital products
  totalAmount     Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  orderItems      OrderItem[]

  @@map("orders")
}

// New OrderItem model
model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  productName String  // Store product name at time of order
  price       Decimal @db.Decimal(10, 2) // Store price at time of order
  quantity    Int
  
  // Relations
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("order_items")
}

// Order status enum - more comprehensive workflow
enum OrderStatus {
  PENDING     // Order created, payment pending
  CONFIRMED   // Payment received/confirmed
  PROCESSING  // Order being prepared
  SHIPPED     // Physical products shipped
  DELIVERED   // Physical products delivered
  COMPLETED   // Digital products delivered OR physical delivered + confirmed
  CANCELLED   // Order cancelled
  REFUNDED    // Order refunded
  
  @@map("order_status")
}

enum ProductStatus {
  DRAFT     // Not visible to customers
  ACTIVE    // Available for purchase
  ARCHIVED  // Hidden but not deleted
  
  @@map("product_status")
}